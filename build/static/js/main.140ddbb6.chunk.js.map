{"version":3,"sources":["queries.js","components/AddBook.js","components/BookDetails.js","components/BookList.js","App.js","reportWebVitals.js","index.js"],"names":["GET_BOOKS_QUERY","gql","GET_AUTHORS_QUERY","ADD_BOOK_MUTATION","GET_BOOK_QUERY","AddBook","useQuery","loading","error","data","useMutation","update","cache","modify","fields","books","existingBooks","addBookMutation","useState","bookName","setBookName","genre","setGenre","authorId","setAuthorId","id","onSubmit","event","preventDefault","variables","name","className","type","onChange","target","value","disabled","disable","authors","map","BookDetails","bookId","book","author","item","displayBookDetails","BookList","selected","setSelected","onClick","client","ApolloClient","uri","InMemoryCache","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.140ddbb6.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const GET_BOOKS_QUERY = gql`\n  {\n    books {\n      name\n      genre\n      id\n    }\n  }\n`;\n\nexport const GET_AUTHORS_QUERY = gql`\n  {\n    authors {\n      name\n      id\n    }\n  }\n`;\n\nexport const ADD_BOOK_MUTATION = gql`\n  mutation AddBook($name: String!, $genre: String!, $authorId: ID!) {\n    addBook(name: $name, genre: $genre, authordId: $authorId) {\n      name\n      genre\n      id\n    }\n  }\n`;\n\nexport const GET_BOOK_QUERY = gql`\n  query GetBook($id: ID) {\n    book(id: $id) {\n      id\n      name\n      genre\n      author {\n        id\n        name\n        age\n        books {\n          name\n          id\n        }\n      }\n    }\n  }\n`;\n","import { useMutation, useQuery } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { ADD_BOOK_MUTATION, GET_AUTHORS_QUERY } from \"../queries\";\n\nfunction AddBook() {\n  const { loading, error, data } = useQuery(GET_AUTHORS_QUERY);\n  const [addBookMutation] = useMutation(ADD_BOOK_MUTATION, {\n    update(cache, { data }) {\n      cache.modify({\n        fields: {\n          books(existingBooks = []) {\n            return [...existingBooks, data];\n          },\n        },\n      });\n    },\n  });\n  const [bookName, setBookName] = useState(\"\");\n  const [genre, setGenre] = useState(\"\");\n  const [authorId, setAuthorId] = useState();\n\n  function displayAuthors() {\n    if (loading) return <option disabled>Loading authors...</option>;\n    if (error) return <option disable>Failed to get authors</option>;\n    return data.authors.map(({ id, name }) => (\n      <option key={id} value={id}>\n        {name}\n      </option>\n    ));\n  }\n\n  function onClickAddBook(event) {\n    event.preventDefault();\n\n    addBookMutation({\n      variables: {\n        name: bookName,\n        genre,\n        authorId,\n      },\n    });\n  }\n\n  return (\n    <form id=\"add-book\" onSubmit={onClickAddBook}>\n      <div className=\"field\">\n        <label>Book name:</label>\n        <input type=\"text\" onChange={(event) => setBookName(event.target.value)} />\n      </div>\n      <div className=\"field\">\n        <label>Genre:</label>\n        <input type=\"text\" onChange={(event) => setGenre(event.target.value)} />\n      </div>\n      <div className=\"field\">\n        <label>Author:</label>\n        <select onChange={(event) => setAuthorId(event.target.value)}>\n          <option>Select author</option>\n          {displayAuthors()}\n        </select>\n      </div>\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default AddBook;\n","import { useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { GET_BOOK_QUERY } from \"../queries\";\n\nfunction BookDetails({ bookId }) {\n  const { data } = useQuery(GET_BOOK_QUERY, { variables: { id: bookId } });\n  function displayBookDetails() {\n    const book = data ? data.book : null;\n    if (book) {\n      return (\n        <div>\n          <h2>{book.name}</h2>\n          <p>{book.genre}</p>\n          <p>{book.author.name}</p>\n          <p>All books by this author:</p>\n          <ul className=\"other-books\">\n            {book.author.books.map((item) => {\n              return <li key={item.id}>{item.name}</li>;\n            })}\n          </ul>\n        </div>\n      );\n    } else {\n      return <div>No book selected...</div>;\n    }\n  }\n\n  return <div className=\"book-details\">{displayBookDetails()}</div>;\n}\n\nexport default BookDetails;\n","import { useQuery } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { GET_BOOKS_QUERY } from \"../queries\";\nimport BookDetails from \"./BookDetails\";\n\nfunction BookList() {\n  const { loading, error, data } = useQuery(GET_BOOKS_QUERY);\n  const [selected, setSelected] = useState(null);\n\n  if (loading) return <p>Loading books...</p>;\n  if (error) return <p>`Error :(\\n${error}`</p>;\n  return (\n    <div id=\"books\">\n      <ul id=\"book-list\">\n        {data.books.map(({ name, id }) => (\n          <li key={id} onClick={() => setSelected(id)}>{name}</li>\n        ))}\n      </ul>\n      <BookDetails bookId={ selected } />\n    </div>\n  );\n}\n\nexport default BookList;\n","import { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { ApolloProvider } from \"@apollo/client/react\";\nimport AddBook from \"./components/AddBook\";\nimport BookList from \"./components/BookList\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <main>\n        <h1>Book List</h1>\n        <BookList />\n        <AddBook />\n      </main>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}